<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>notepad2</title>
    <link rel="stylesheet" href="/static/css/default.css">
    <!-- <link rel="stylesheet" href="/static/css/codemirror.css"> -->
    <% if (htmlWebpackPlugin.options.nodeModules) { %>
      <!-- Add `node_modules/` to global paths so `require` works properly in development -->
      <script>
        require('module').globalPaths.push('<%= htmlWebpackPlugin.options.nodeModules.replace(/\\/g, '\\\\') %>')
      </script>
    <% } %>
  </head>
  <body>
    <div id="app"></div>
    <!-- Set `__static` path to static files in production -->
    <script>
      if (process.env.NODE_ENV !== 'development') window.__static = require('path').join(__dirname, '/static').replace(/\\/g, '\\\\')
      const { remote } = require('electron')
      const { Menu, MenuItem } = remote
      
      const menu = new Menu()
      menu.append(new MenuItem({
        role: 'copy',
        label: '复制',
        click() {
          console.log(this, arguments)
        }
      }))
      menu.append(new MenuItem({
        role: 'cut',
        label: '剪切',
        click() {
          console.log(this, arguments)
        }
      }))
      menu.append(new MenuItem({
        role: 'paste',
        label: '粘贴',
        click() {
          console.log(this, arguments)
        }
      }))
      menu.append(new MenuItem({
        role: 'delete',
        label: '删除',
        click() {
          console.log(this, arguments)
        }
      }))
      menu.append(new MenuItem({
        type: 'separator'
      }))
      // menu.append(new MenuItem({ role: 'toggledevtools', label: '审查元素', click() { console.log(this, arguments) } }))
      menu.append(new MenuItem({
        role: 'reload',
        label: '刷新',
        click() {
          console.log(this, arguments)
        }
      }))
      menu.append(new MenuItem({
        role: 'quit',
        label: '退出',
        click() {
          console.log(this, arguments)
        }
      }))

      window.addEventListener('contextmenu', (e) => {
        e.preventDefault()
        menu.popup({
          window: remote.getCurrentWindow()
        })
      }, false)
    </script>

    <!-- webpack builds are automatically injected -->
  </body>
</html>
